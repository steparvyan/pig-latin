{"ast":null,"code":"var _jsxFileName = \"/Users/ryzm/Desktop/pig-latin/src/App.js\";\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.translate = e => {\n      e.preventDefault();\n      let inputToTranslate = this.state.phrase; //work\n\n      let words = inputToTranslate.split(' ');\n      let pigLatinWords = [];\n      let vowelsSometimesY = ['a', 'e', 'i', 'o', 'u', 'y'];\n      let letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n      let puncuation = ['.', ','];\n\n      for (let i = 0; i < words.length; i++) {\n        let isTherePuncuation = [false, false];\n        let word = words[i];\n        let puncuationPresent = false;\n\n        for (let p = 0; p < puncuation.length; p++) {\n          if (word.includes(puncuation[p])) {\n            isTherePuncuation[p] = true;\n            puncuationPresent = true;\n          }\n        }\n\n        let wordLowerCase = word.toLowerCase();\n        let pigLatinWord = '';\n        let firstVowel = '';\n        let dexFirstVowel = 100;\n        let qDex = wordLowerCase.indexOf('q');\n        let isCapatilized = word.charAt(0).toUpperCase() === word.charAt(0);\n        let vowelFound = false;\n        let letterFound = false;\n\n        for (let j = 0; j < word.length; j++) {\n          let char = wordLowerCase.charAt(j);\n\n          if (!letterFound) {\n            if (letters.includes(char)) {\n              letterFound = true;\n            }\n          }\n\n          if (!vowelFound) {\n            if (vowelsSometimesY.includes(char)) {\n              firstVowel = char;\n              dexFirstVowel = j;\n              vowelFound = true;\n\n              if (!puncuationPresent) {\n                break;\n              }\n            }\n          }\n\n          if (letterFound) {\n            if (puncuation.includes(char)) {\n              word = word.replace(char, \"\");\n            }\n          }\n        }\n\n        if (!letterFound) {\n          pigLatinWord = word;\n          pigLatinWords.push(pigLatinWord);\n          continue;\n        }\n\n        if (dexFirstVowel === 0) {\n          pigLatinWord = word + \"way\";\n        } else {\n          let qInWord = false; //if qDex > -1 then there is a q\n\n          if (qDex > -1) {\n            //if qDex is less than first vowel then this is a q word\n            if (qDex < dexFirstVowel) {\n              if (qDex === 0) {\n                if (firstVowel === \"u\") {\n                  qInWord = true;\n                }\n              } else {\n                if (firstVowel === \"u\") {\n                  qInWord = true;\n                }\n              }\n            }\n          }\n\n          let xtraDex = qInWord ? 1 : 0;\n          pigLatinWord = word.slice(dexFirstVowel + xtraDex) + word.slice(0, dexFirstVowel + xtraDex) + 'ay';\n          pigLatinWord.toLowerCase();\n\n          if (isCapatilized) {\n            pigLatinWord = pigLatinWord.charAt(0).toUpperCase() + pigLatinWord.slice(1).toLowerCase();\n          }\n        }\n\n        if (puncuationPresent) {\n          for (let r = 0; r < puncuation.length; r++) {\n            if (isTherePuncuation[r]) {\n              pigLatinWord += puncuation[r];\n              break;\n            }\n          }\n        }\n\n        pigLatinWords.push(pigLatinWord);\n      }\n\n      inputToTranslate = pigLatinWords.join(\" \");\n      this.setState({\n        phraseTranslated: inputToTranslate\n      });\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        phrase: e.target.value\n      });\n    };\n\n    this.state = {\n      phrase: '',\n      phraseTranslated: 'Let me translate to Pig Latin for you.'\n    };\n  } // The translate function is where you will put your logic to convert the sentence entered by the user to pig location.  What is currently in the function will only directly copy what the user has entered.\n\n\n  //https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\n  // <div id=\"pigImage\">\n  //             <img src='https://images3.alphacoders.com/235/235985.jpg' alt=\"pig with butcher cut names in pig latin\" id=\"butcherPig\"></img>\n  //           </div>\n  render() {\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"sidebar\", {\n      className: \"box sidebar sidebarBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"form\", {\n      className: \"info\",\n      onSubmit: this.translate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"input-phrase\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Translate this: \"), React.createElement(\"input\", {\n      name: \"input-phrase\",\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      className: \"button\",\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: \"original-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.phrase))), React.createElement(\"div\", {\n      className: \"emptybox empty\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"contentBox speech-bubble speech-bubble\",\n      id: \"tran-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.state.phraseTranslated)), React.createElement(\"footer\", {\n      className: \" footer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"text-center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"Coded by Arvin and Ryan\"))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ryzm/Desktop/pig-latin/src/App.js"],"names":["React","App","Component","constructor","props","translate","e","preventDefault","inputToTranslate","state","phrase","words","split","pigLatinWords","vowelsSometimesY","letters","puncuation","i","length","isTherePuncuation","word","puncuationPresent","p","includes","wordLowerCase","toLowerCase","pigLatinWord","firstVowel","dexFirstVowel","qDex","indexOf","isCapatilized","charAt","toUpperCase","vowelFound","letterFound","j","char","replace","push","qInWord","xtraDex","slice","r","join","setState","phraseTranslated","handleChange","target","value","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      phrase: '',\n      phraseTranslated: 'Let me translate to Pig Latin for you.'\n    }\n  }\n  // The translate function is where you will put your logic to convert the sentence entered by the user to pig location.  What is currently in the function will only directly copy what the user has entered.\n\n  translate = (e) => {\n    e.preventDefault()\n    let inputToTranslate = this.state.phrase\n\n    //work\n    let words = inputToTranslate.split(' ');\n    let pigLatinWords = [];\n    let vowelsSometimesY = ['a','e','i','o','u','y']\n    let letters = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z',]\n    let puncuation = ['.', ',']\n    for(let i = 0; i < words.length; i++) {\n      let isTherePuncuation = [false, false];\n      let word = words[i];\n      let puncuationPresent = false;\n      for(let p = 0; p < puncuation.length; p++){\n        if(word.includes(puncuation[p])){\n          isTherePuncuation[p] = true;\n          puncuationPresent = true;\n        }\n      }\n      let wordLowerCase = word.toLowerCase();\n      let pigLatinWord = '';\n      let firstVowel = '';\n      let dexFirstVowel = 100;\n      let qDex = wordLowerCase.indexOf('q');\n      let isCapatilized = word.charAt(0).toUpperCase() === word.charAt(0);\n\n      let vowelFound = false;\n      let letterFound = false;\n      for(let j = 0; j < word.length; j++) {\n        let char = wordLowerCase.charAt(j);\n        if(!letterFound){\n          if(letters.includes(char)){\n            letterFound = true;\n          }\n        }\n        if(!vowelFound){\n          if(vowelsSometimesY.includes(char)) {\n            firstVowel = char;\n            dexFirstVowel = j;\n            vowelFound = true;\n            if(!puncuationPresent){\n              break;\n            }\n          }\n        }\n        if(letterFound){\n          if(puncuation.includes(char)){\n            word = word.replace(char, \"\");\n          }\n        }\n      }\n\n      if(!letterFound){\n        pigLatinWord = word;\n        pigLatinWords.push(pigLatinWord);\n        continue;\n      }\n\n      if(dexFirstVowel === 0){\n        pigLatinWord = word + \"way\";\n      }\n      else {\n        let qInWord = false;\n        //if qDex > -1 then there is a q\n        if(qDex > -1) {\n          //if qDex is less than first vowel then this is a q word\n          if(qDex < dexFirstVowel){\n            if(qDex === 0) {\n              if(firstVowel === \"u\") {\n                qInWord = true;\n              }\n            }\n            else {\n              if(firstVowel === \"u\") {\n                qInWord = true;\n              }\n            }\n          }\n        }\n        let xtraDex = qInWord ? 1 : 0;\n        pigLatinWord = word.slice(dexFirstVowel + xtraDex) + word.slice(0, dexFirstVowel + xtraDex) + 'ay';\n        pigLatinWord.toLowerCase();\n        if(isCapatilized){\n          pigLatinWord = pigLatinWord.charAt(0).toUpperCase() + pigLatinWord.slice(1).toLowerCase();\n        }\n      }\n      if(puncuationPresent){\n        for(let r = 0; r < puncuation.length; r++){\n          if(isTherePuncuation[r]){\n            pigLatinWord += puncuation[r];\n            break;\n          }\n        }\n      }\n      pigLatinWords.push(pigLatinWord);\n    }\n\n    inputToTranslate = pigLatinWords.join(\" \");\n    this.setState({phraseTranslated: inputToTranslate})\n  }\n\n\n\n  handleChange = (e) => {\n    this.setState({phrase: e.target.value})\n  }\n//https://lh3.googleusercontent.com/QvvsRY5ShwDNEouVMK8_z7QCwS3grkgd4mzZOlom23Hurralk54ObvsyEMM8ZSNR5pEFBeBMzltzEEcgi2llYJnhXTuXClN3njmMjtw3vgn8Go5jr40fHMNzfI64eYRrnHbZUutxCA=w2400\n// <div id=\"pigImage\">\n//             <img src='https://images3.alphacoders.com/235/235985.jpg' alt=\"pig with butcher cut names in pig latin\" id=\"butcherPig\"></img>\n//           </div>\n  render() {\n    return (\n\n      <div className=\"wrapper\">\n        <sidebar className = \"box sidebar sidebarBox\">\n          <div>\n            <form className=\"info\" onSubmit={this.translate}>\n              <label htmlFor=\"input-phrase\">Translate this: </label>\n              <input name=\"input-phrase\" onChange={this.handleChange}></input>\n              <input className=\"button\" type=\"submit\" value=\"Submit\" />\n            </form>\n            <p className=\"original-text\">{this.state.phrase}</p>\n          </div>\n        </sidebar>\n        <div className = \"emptybox empty\">\n        </div>\n        <div className=\"contentBox speech-bubble speech-bubble\" id=\"tran-text\">\n          <p>{this.state.phraseTranslated}</p>\n        </div>\n        <footer className=\" footer\">\n          <div className=\"text-center\">\n            <p>Coded by Arvin and Ryan</p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}